<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.taotieshop.demo.dao.ExchangeMapper">
  <resultMap id="BaseResultMap" type="com.taotieshop.demo.entity.Exchange">
    <result column="record_id" jdbcType="INTEGER" property="record_id" />
    <result column="open_id" jdbcType="VARCHAR" property="open_id" />
    <result column="goods_id" jdbcType="INTEGER" property="goods_id" />
    <result column="create_date" jdbcType="TIMESTAMP" property="create_date" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    record_id, open_id, goods_id, create_date
  </sql>
  <select id="selectByExample" parameterType="com.taotieshop.demo.entity.ExchangeExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from ice_exchange
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.taotieshop.demo.entity.ExchangeExample">
    delete from ice_exchange
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.taotieshop.demo.entity.Exchange">
    insert into ice_exchange (record_id, open_id, goods_id, 
      create_date)
    values (#{record_id,jdbcType=INTEGER}, #{open_id,jdbcType=VARCHAR}, #{goods_id,jdbcType=INTEGER}, 
      #{create_date,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.taotieshop.demo.entity.Exchange">
    insert into ice_exchange
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="record_id != null">
        record_id,
      </if>
      <if test="open_id != null">
        open_id,
      </if>
      <if test="goods_id != null">
        goods_id,
      </if>
      <if test="create_date != null">
        create_date,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="record_id != null">
        #{record_id,jdbcType=INTEGER},
      </if>
      <if test="open_id != null">
        #{open_id,jdbcType=VARCHAR},
      </if>
      <if test="goods_id != null">
        #{goods_id,jdbcType=INTEGER},
      </if>
      <if test="create_date != null">
        #{create_date,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.taotieshop.demo.entity.ExchangeExample" resultType="java.lang.Long">
    select count(*) from ice_exchange
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update ice_exchange
    <set>
      <if test="record.record_id != null">
        record_id = #{record.record_id,jdbcType=INTEGER},
      </if>
      <if test="record.open_id != null">
        open_id = #{record.open_id,jdbcType=VARCHAR},
      </if>
      <if test="record.goods_id != null">
        goods_id = #{record.goods_id,jdbcType=INTEGER},
      </if>
      <if test="record.create_date != null">
        create_date = #{record.create_date,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update ice_exchange
    set record_id = #{record.record_id,jdbcType=INTEGER},
      open_id = #{record.open_id,jdbcType=VARCHAR},
      goods_id = #{record.goods_id,jdbcType=INTEGER},
      create_date = #{record.create_date,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
</mapper>